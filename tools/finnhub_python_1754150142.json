{
  "id": "finnhub_python_1754150142",
  "tool_description": "Fetches real-time stock prices and market data for any ticker symbol",
  "keywords": "acquire api business company corporation cost current data datetime details endpoint equity exchange fetch finance finnhub firm get info information interface json latest market nasdaq now nyse obtain price prices python quote rate real recent retrieve service share stock symbol ticker time today trading 交易 今天 价值 价格 企业 信息",
  "install_dependencies": [
    "pip install finnhub-python"
  ],
  "python_code": "import finnhub\nimport json\nfrom datetime import datetime\ndef fetch_stock_data():\n    ticker_symbol = input(\"Enter stock ticker symbol (e.g., AAPL, TSLA, GOOGL): \").upper().strip()\n    api_key = input(\"Enter your Finnhub API key (get free at https://finnhub.io/register): \").strip()\n    try:\n        finnhub_client = finnhub.Client(api_key=api_key)\n        quote_data = finnhub_client.quote(ticker_symbol)\n        company_profile = finnhub_client.company_profile2(symbol=ticker_symbol)\n        recommendation = finnhub_client.recommendation_trends(ticker_symbol)\n        result = {\n            \"symbol\": ticker_symbol,\n            \"current_price\": quote_data.get('c', 'N/A'),\n            \"high_price\": quote_data.get('h', 'N/A'),\n            \"low_price\": quote_data.get('l', 'N/A'),\n            \"open_price\": quote_data.get('o', 'N/A'),\n            \"previous_close\": quote_data.get('pc', 'N/A'),\n            \"change\": quote_data.get('d', 'N/A'),\n            \"percent_change\": quote_data.get('dp', 'N/A'),\n            \"timestamp\": quote_data.get('t', 'N/A'),\n            \"company_name\": company_profile.get('name', 'N/A'),\n            \"country\": company_profile.get('country', 'N/A'),\n            \"currency\": company_profile.get('currency', 'N/A'),\n            \"exchange\": company_profile.get('exchange', 'N/A'),\n            \"industry\": company_profile.get('finnhubIndustry', 'N/A'),\n            \"market_cap\": company_profile.get('marketCapitalization', 'N/A'),\n            \"shares_outstanding\": company_profile.get('shareOutstanding', 'N/A'),\n            \"weburl\": company_profile.get('weburl', 'N/A'),\n            \"logo\": company_profile.get('logo', 'N/A'),\n            \"recent_recommendations\": recommendation[:3] if recommendation else 'N/A',\n            \"fetch_time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        print(\"\\n--- Stock Price Data ---\")\n        print(f\"Company: {result['company_name']} ({result['symbol']})\")\n        print(f\"Current Price: {result['current_price']} {result['currency']}\")\n        print(f\"Change: {result['change']} ({result['percent_change']}%)\")\n        print(f\"Open: {result['open_price']}\")\n        print(f\"High: {result['high_price']}\")\n        print(f\"Low: {result['low_price']}\")\n        print(f\"Previous Close: {result['previous_close']}\")\n        print(f\"Exchange: {result['exchange']}\")\n        print(f\"Industry: {result['industry']}\")\n        print(f\"Market Cap: {result['market_cap']}\")\n        print(f\"Country: {result['country']}\")\n        print(f\"Website: {result['weburl']}\")\n        if result['recent_recommendations'] != 'N/A':\n            print(f\"Recent Analyst Recommendations: {len(result['recent_recommendations'])} available\")\n        print(f\"Data fetched at: {result['fetch_time']}\")\n        with open('tool_output.json', 'w', encoding='utf-8') as f:\n            json.dump(result, f, ensure_ascii=False, indent=2)\n        print(\"\\nData saved to tool_output.json\")\n        return result\n    except Exception as e:\n        print(f\"Error fetching stock data: {str(e)}\")\n        error_result = {\n            \"error\": str(e),\n            \"status\": \"failed\",\n            \"symbol\": ticker_symbol,\n            \"fetch_time\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        with open('tool_output.json', 'w', encoding='utf-8') as f:\n            json.dump(error_result, f, ensure_ascii=False, indent=2)\n        return error_result\ndef main():\n    fetch_stock_data()\nif __name__ == \"__main__\":\n    main()",
  "created_at": 1754150142.4653857,
  "original_name": "finnhub-python"
}