{
  "id": "weatherflow_collector_1754151528",
  "tool_description": "Retrieves current weather data and conditions for any specified location",
  "keywords": "acquire api celsius climate cloudy collector condition conditions current data datetime degree details endpoint fahrenheit fetch forecast get humidity info information interface json latest location now obtain openweathermap rain recent requests retrieve service sunny temp temperature today weather weatherflow wind 今天 信息 天气 当前 接口 数据 最新 查询 温度 获取",
  "install_dependencies": [],
  "python_code": "import requests\nimport json\nfrom datetime import datetime\ndef fetch_weather_data():\n    location = input(\"Enter location (city name): \")\n    api_key = input(\"Enter your OpenWeatherMap API key (get free at https://openweathermap.org/api): \")\n    try:\n        # Base URL for OpenWeatherMap current weather API\n        base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n        # Parameters for the API request\n        params = {\n            'q': location,\n            'appid': api_key,\n            'units': 'metric'  # Get temperature in Celsius\n        }\n        # Make API request\n        response = requests.get(base_url, params=params)\n        response.raise_for_status()\n        # Parse JSON response\n        weather_data = response.json()\n        # Extract relevant data\n        main_weather = weather_data['weather'][0]['main']\n        description = weather_data['weather'][0]['description']\n        temperature = weather_data['main']['temp']\n        feels_like = weather_data['main']['feels_like']\n        humidity = weather_data['main']['humidity']\n        pressure = weather_data['main']['pressure']\n        wind_speed = weather_data['wind'].get('speed', 'N/A')\n        wind_direction = weather_data['wind'].get('deg', 'N/A')\n        country = weather_data['sys']['country']\n        city_name = weather_data['name']\n        # Get current timestamp\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        # Build comprehensive result dictionary\n        result = {\n            \"location\": f\"{city_name}, {country}\",\n            \"query_time\": current_time,\n            \"main_weather\": main_weather,\n            \"description\": description,\n            \"temperature_celsius\": temperature,\n            \"feels_like_celsius\": feels_like,\n            \"humidity_percent\": humidity,\n            \"pressure_hpa\": pressure,\n            \"wind_speed_ms\": wind_speed,\n            \"wind_direction_degrees\": wind_direction,\n            \"coordinates\": {\n                \"longitude\": weather_data['coord']['lon'],\n                \"latitude\": weather_data['coord']['lat']\n            },\n            \"visibility_meters\": weather_data.get('visibility', 'N/A'),\n            \"cloudiness_percent\": weather_data['clouds']['all'],\n            \"sunrise\": datetime.fromtimestamp(weather_data['sys']['sunrise']).strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"sunset\": datetime.fromtimestamp(weather_data['sys']['sunset']).strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"data_timestamp\": datetime.fromtimestamp(weather_data['dt']).strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        # Add temperature in Fahrenheit for convenience\n        result[\"temperature_fahrenheit\"] = round((temperature * 9/5) + 32, 1)\n        result[\"feels_like_fahrenheit\"] = round((feels_like * 9/5) + 32, 1)\n        # Display results for user visibility\n        print(\"\\n--- Current Weather Results ---\")\n        print(f\"Location: {result['location']}\")\n        print(f\"Weather: {result['main_weather']} - {result['description']}\")\n        print(f\"Temperature: {result['temperature_celsius']}°C ({result['temperature_fahrenheit']}°F)\")\n        print(f\"Feels like: {result['feels_like_celsius']}°C ({result['feels_like_fahrenheit']}°F)\")\n        print(f\"Humidity: {result['humidity_percent']}%\")\n        print(f\"Pressure: {result['pressure_hpa']} hPa\")\n        print(f\"Wind: {result['wind_speed_ms']} m/s at {result['wind_direction_degrees']}°\")\n        print(f\"Cloudiness: {result['cloudiness_percent']}%\")\n        print(f\"Visibility: {result['visibility_meters']} meters\")\n        print(f\"Sunrise: {result['sunrise']}\")\n        print(f\"Sunset: {result['sunset']}\")\n        print(f\"Data timestamp: {result['data_timestamp']}\")\n        print(f\"Query time: {result['query_time']}\")\n        # Save all data for other tools to use\n        with open('tool_output.json', 'w', encoding='utf-8') as f:\n            json.dump(result, f, ensure_ascii=False, indent=2)\n        print(\"\\nData saved to tool_output.json\")\n        return result\n    except requests.exceptions.RequestException as e:\n        print(f\"Network error: {str(e)}\")\n        error_result = {\"error\": f\"Network error: {str(e)}\", \"status\": \"failed\", \"location\": location}\n        with open('tool_output.json', 'w', encoding='utf-8') as f:\n            json.dump(error_result, f, ensure_ascii=False, indent=2)\n        return error_result\n    except KeyError as e:\n        print(f\"Data parsing error: Missing field {str(e)} in API response\")\n        error_result = {\"error\": f\"Data parsing error: Missing field {str(e)}\", \"status\": \"failed\", \"location\": location}\n        with open('tool_output.json', 'w', encoding='utf-8') as f:\n            json.dump(error_result, f, ensure_ascii=False, indent=2)\n        return error_result\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        error_result = {\"error\": str(e), \"status\": \"failed\", \"location\": location}\n        with open('tool_output.json', 'w', encoding='utf-8') as f:\n            json.dump(error_result, f, ensure_ascii=False, indent=2)\n        return error_result\ndef main():\n    fetch_weather_data()\nif __name__ == \"__main__\":\n    main()",
  "created_at": 1754151528.09957,
  "original_name": "weatherflow-collector"
}